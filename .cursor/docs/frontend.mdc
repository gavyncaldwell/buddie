---
description:
globs:
alwaysApply: false
---
# Buddie Frontend

## Technology Stack

- **Framework**: SvelteKit
- **Language**: TypeScript
- **UI Components**: Skeleton UI (Tailwind-based)
- **State Management**: Svelte stores
- **Form Validation**: Zod
- **API Client**: Custom fetch wrapper with TypeScript types
- **PWA**: Vite PWA plugin

## Code Organization

### Main Structure

- `src/routes/`: SvelteKit file-based routing
- `src/lib/`: Shared utilities, types, and helpers
- `src/components/`: Reusable UI components
- `src/stores/`: State management with Svelte stores

### Key Components

#### Routes

- `/`: Home page with featured products and user recommendations
- `/products`: Product browsing and filtering
- `/products/[id]`: Product detail page
- `/profile`: User profile and settings
- `/reviews`: User's product reviews
- `/favorites`: User's favorite products
- `/auth`: Authentication pages

#### Components

- `ProductCard`: Displays product summary
- `ProductDetail`: Comprehensive product information
- `StarRating`: Interactive star rating component
- `FilterPanel`: Product filtering interface
- `SearchBar`: Global search functionality
- `ReviewForm`: Form for submitting product reviews
- `AuthForm`: Login and registration form

#### Stores

- `authStore`: Authentication state and user info
- `productStore`: Product data and filters
- `notificationStore`: System notifications and alerts
- `cartStore`: Shopping cart functionality (future)

## Type Safety

### API Types

- API request/response types match backend Pydantic schemas
- Shared interfaces for common data models
- Type-safe API client functions

### Component Props

- All component props use TypeScript interfaces
- Form data validated with Zod schemas
- Strong typing for store data

## State Management

- Use Svelte stores for global state
- Local component state with reactive variables
- Persistent state with localStorage/sessionStorage
- Real-time updates with store subscriptions

## Development Guidelines

### Component Design

- Keep components small and focused
- Use props for configuration
- Emit events for parent communication
- Follow atomic design principles

### Styling

- Use Tailwind utility classes
- Apply Skeleton UI components
- Maintain responsive design
- Follow accessibility guidelines

### Performance

- Lazy-load routes and heavy components
- Implement proper caching strategies
- Optimize bundle size
- Use SSR for initial page load
