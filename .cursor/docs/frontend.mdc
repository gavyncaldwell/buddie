---
description:
globs:
alwaysApply: false
---
# Buddie Frontend

## Architecture

The frontend of Buddie is built with SvelteKit, providing a modern and efficient development experience.

### Key Components

1. **Routing**: SvelteKit file-based routing system
2. **Components**: Reusable UI components
3. **Stores**: State management with Svelte stores
4. **API Client**: Interaction with the backend API

## Technology Stack

- **Framework**: SvelteKit
- **Language**: TypeScript
- **Styling**: TailwindCSS + Skeleton UI
- **PWA**: Vite PWA plugin
- **Form Handling**: Zod for validation
- **Testing**: Vitest + Testing Library

## Directory Structure

```
frontend/
├── src/
│   ├── components/
│   │   ├── common/
│   │   ├── layout/
│   │   └── products/
│   ├── lib/
│   │   ├── api/
│   │   ├── stores/
│   │   └── utils/
│   ├── routes/
│   │   ├── login/
│   │   ├── products/
│   │   └── profile/
│   └── app.html
├── static/
│   ├── fonts/
│   └── images/
└── tests/
```

## Development Environment

### Setup

1. Run `make setup-frontend` to install dependencies
2. Run `make dev` to start the development server
3. Access the frontend at http://localhost:3001

### Configuration

The frontend is configured through environment variables:

- During development: Set in `.env` files or docker-compose.yml
- In production: Set through fly.io environment variables

## Routing

SvelteKit uses file-based routing:

- `src/routes/+page.svelte` - Home page
- `src/routes/products/+page.svelte` - Products listing
- `src/routes/products/[id]/+page.svelte` - Product details
- `src/routes/login/+page.svelte` - Login page
- `src/routes/register/+page.svelte` - Registration page
- `src/routes/profile/+page.svelte` - User profile

## Components

Components are organized by function:

- **Common**: Buttons, inputs, cards, etc.
- **Layout**: Header, footer, sidebar, etc.
- **Products**: Product card, product details, etc.

## State Management

State is managed using Svelte stores:

- `src/lib/stores/auth.ts` - Authentication state
- `src/lib/stores/cart.ts` - Shopping cart state
- `src/lib/stores/products.ts` - Product state and filtering

## API Integration

All API calls are abstracted in the `src/lib/api` directory:

- `src/lib/api/base.ts` - Base API client with auth handling
- `src/lib/api/products.ts` - Product-related API calls
- `src/lib/api/auth.ts` - Authentication-related API calls

## Styling

The app uses TailwindCSS with Skeleton UI for styling:

- Custom theme defined in `tailwind.config.js`
- Global styles in `src/app.css`
- Component-specific styles within component files

## Testing

Tests are written using Vitest and Testing Library:

- Component tests in `tests/components`
- Route tests in `tests/routes`
- Utility tests in `tests/lib`

Run tests with:

```bash
make test-frontend
```

## Best Practices

1. **Component Design**: Create small, reusable components
2. **Type Safety**: Use TypeScript for all components and utilities
3. **Accessibility**: Ensure all components meet WCAG standards
4. **Testing**: Write tests for all components and critical functionality
5. **Progressive Enhancement**: Ensure the app works without JavaScript
